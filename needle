#!/bin/bash
#
# needle: Part of the Embroidermodder 2 Project.
#
# Copyright 2025 The Embroidermodder Team
# Embroidermodder 2 is Open Source Software, see LICENSE.md for licensing terms.
#
# Read the reference manual (https://www.libembroidery.org/downloads/emrm.pdf)
# for advice on altering this file.
#
# -----------------------------------------------------------------------------------
#
# Built around the matrix strategy method:
#     https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
#
# On *nix we assume the FreeDesktop specification as described here:
#	https://www.freedesktop.org/software/systemd/man/latest/file-hierarchy.html
#
# On other systems this is overridden when this script is installed and called.

BUILD_DIR="build"
BUILD_TYPE="Release"
GENERATOR="Unix Makefiles"
SYSTEM="linux"
MAJOR="2"
MINOR="0"
PATCH="0"
TAG="alpha"
EMB_VERSION="$MAJOR_$MINOR_$PATCH-$TAG"
BINDIR="$HOME/.local/bin"
WORKDIR="$HOME/.local/share/embroidermodder2"
NEEDLE_VERSION="1.0.0-alpha1"
EMB=./test/embroider
TEST_TIME=10
TOTAL_TESTS=13

function help_msg () {

	cat <<EOF
needle

This script is part of Embroidermodder 2 under the zlib license.

Usage: ./needle [options]
A script to build, debug and package Embroidermodder 2 and its documentation.

This is the parent script that is responsible for running all builds, tests,
coverage and static analysis. It produces a collection of JSON files representing.

Options:
  -a                      Produce an analysis report using clang's AST output
                          and static analysis tools.
     --convert-xpm        Convert the icons and images into xpm encoded C strings
                          so they can be compiled into the executable.
  -b,--build              Build embroidermodder without debug information.
                          This matches the packaged version.
  -c,--clean              Remove object files and other build cruft.
  -d,--debug              Build embroidermodder with warnings as errors
                          and run in a debugger.
  -b,--dependencies-brew  Install dependencies for Mac OS.
  -a,--dependencies-apt   Install dependencies for systems with the
                          aptitude package manager.
  -h,--help               Describe how to use this script with paging.
     --windows-latest     Prepare GitHub artifact for Windows release.
     --macos-latest       Prepare GitHub artifact for MacOS release.
     --linux-latest       Prepare GitHub artifact for GNU/Linux release.
  -G,--generator          Accepts argument to override the GENERATOR variable.
  -s,--style              Fix basic style problems in the code.

EOF

}

function update_needle () {

	rm -f $BINDIR/needle
        wget https://raw.githubusercontent.com/Embroidermodder/needle/refs/heads/main/needle -O $BINDIR/needle
	chmod +x $BINDIR/needle

	echo "Installed new version of needle:"
	needle --version

}

function badge () {

	COLOR="red"
	if [ "$2" = "passed" ]; then
		COLOR="green"
	elif [ "$2" = "MIT" ]; then
		COLOR="yellow"
	elif [ "$2" = "zlib" ]; then
		COLOR="yellow"
	elif [ "$1" = "version" ]; then
		COLOR="purple"
	fi

	wget https://img.shields.io/badge/$1-$2-$COLOR -O docs/images/$3.svg

}

function build_test () {

	BUILD_MESSAGE="failed"
	TEST_MESSAGE="failed"
	PROJECT="$1"
	OS="$2"

#	update_needle

	FROM=`pwd`
	mkdir -p $WORKDIR
	cd $WORKDIR

	git clone https://github.com/embroidermodder/$PROJECT
	cd $PROJECT
	git submodule update --init
	mkdir -p build
	cd build
	cmake ..

	cmake --build .
	BUILD_RESULT=$?
	if [ $BUILD_RESULT -eq 0 ]; then
		BUILD_MESSAGE="passed"
	fi

	cmake --test .
	TEST_RESULT=$?
	if [ $TEST_RESULT -eq 0 ]; then
		TEST_MESSAGE="passed"
	fi

	cd $FROM

	badge "build--$OS" $BUILD_MESSAGE "build-$PROJECT-$OS"
	badge "test--$OS" $TEST_MESSAGE "test-$PROJECT-$OS"

}

function install_current_em2 () {

	build_test embroidermodder
	cp embroidermodder/build/embroidermodder2 $BINDIR

}

function reduce_colors () {

        for i in images/*.png
        do
                echo "Reducing colors of \"$i\"."
                convert $i +dither -colors 16 -depth 4 a.png
                mv a.png $i
        done

}

function clean () {

	rm -fr $WORKDIR/embroidermodder $WORKDIR/libembroidery $WORKDIR/embroideryMobile

}

function build_website () {

	git clone https://github.com/embroidermodder/website
	cd website
	git clone https://github.com/embroidermodder/embroidermodder

	python3 -m pip install --upgrade pip
	python3 -m venv .

	source bin/activate

	./bin/pip install mkdocs
	./bin/pip install mkdocs-bibtex
	./bin/pip install mkdocs-with-pdf
	./bin/pip install mkdocs-material
	./bin/pip install mkdocs-table-reader-plugin
	./bin/pip install markdown-grid-tables

	rm -fr _site

	./bin/mkdocs build

	mv site ../_site
	cd ..

	tar --dereference --hard-dereference --directory _site \
		-cvf artifact.tar --exclude=".[^/]*" .

}

function linux_full () {

	build_test libembroidery linux
	build_test embroidermodder linux
	build_test embroideryMobile android

}

function macos_full () {

	build_test libembroidery macos
	build_test embroidermodder macos
	build_test embroideryMobile ios

}

function windows_full () {

	build_test libembroidery windows
	build_test embroidermodder windows

}

function run_cmake () {

	cmake -S . -B"$BUILD_DIR" -G"$GENERATOR" -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON  || exit 1
	cd $BUILD_DIR
	cmake --build . || exit 1
	cd ..

}

function create_init () {

	outf=src/init_script.c
	cat docs/copyright_message.txt > $outf
	echo "" >> $outf
	echo "#include \"core.h\"" >> $outf
	echo "" >> $outf

	echo "const char *init_script[] = {" >> $outf
	for file in data/*
	do
		# Removes comments, escapes quotes, prepends quote and appends \n",
		sed '/^#/d;s/\"/\\\"/g;s/^/    "/;s/$/\\n",/' $file >> $outf
	done
	echo "    END_SYMBOL" >> $outf
	echo "};" >> $outf
	echo "" >> $outf

}

function get_dependancies () {

	git submodule update --init

	if [[ $1 = "windows" ]]; then
		python -m pip install -U pip --upgrade pip
	 	pip install aqtinstall
		python -m aqt install-qt windows desktop 6.5.0 win64_mingw

		echo "set (CMAKE_PREFIX_PATH \"6.5.0/mingw_64\")" >> config.cmake
	fi

	if [[ $1 = "macos" ]]; then
		brew install qt6 qwt
	fi

	if [[ $1 = "linux" ]]; then
		sudo apt-get update
		sudo apt-get install git build-essential cmake qt6-base-dev libqt6widgets6 \
			libqt6printsupport6 libqt6core6 libgl-dev libgl1-mesa-dev libglx-dev wayland-scanner
		sudo apt upgrade
	fi

}

# build_emscripten_version
# emcc libembroidery/*.c -o embroidery.wasm

function assemble_release () {

	rm -fr $WORKDIR
	get_dependancies $1

	run_cmake
	mkdir $WORKDIR
	cp $BUILD_DIR/embroidermodder2 em2
	cp LICENSE.md em2
	cp -r docs/ em2
	if [[ $1 = "windows" ]]; then
		GENERATOR="MinGW Makefiles"
		cd em2
		../6.5.0/mingw_64/bin/windeployqt embroidermodder2.exe
		cd ..
		powershell Compress-Archive em2 embroidermodder_${VERSION}_windows.zip
	else
		tar cf embroidermodder_${VERSION}_$1.tar em2
	fi

}

function build_debug () {

	TEST_FILES="samples/spiral/spiral5.csv samples/spiral/spiral6.csv"
	TEST_FILES="$TEST_FILES samples/embroidermodder_logo/conflicts/Embroidermodder.DST"
	TEST_FILES="$TEST_FILES samples/shamrockin/shamrockin.dst"

	BUILD_DIR="debug"
	BUILD_TYPE="Debug"

	run_cmake

	cd $BUILD_DIR

	lcov --directory . --capture --output-file em2.info
	gdb -ex=run --ex=quit --args ./embroidermodder2 --cov $TEST_FILES
	genhtml em2.info

	cd ..

}

# This is not intended to be portable and the requirements are whatever is
# necessary since the program builds and ships without this function.
#
# Current requirements: GNU time, clang-tidy, bash,
# standard UNIX tools, python3 and the module: clang_html
#
# https://www.gnu.org/software/complexity/manual/complexity.html
# https://coccinelle.gitlabpages.inria.fr/website/documentation.html
# https://clang.llvm.org/extra/clang-tidy/
function analysis () {

	BUILD_DIR="debug"
	BUILD_TYPE="Debug"

	run_cmake

	echo "Producing clang-tidy report."
	FNAME_TIME="`date -Iseconds`"
	REPORT="clang-tidy-report-$FNAME_TIME.txt"
	clang-tidy --config-file=clang-tidy.txt -p debug src/* &> $REPORT

	python3 -m clang_html $REPORT -o analysis/clang-report.html

}

function file_as_c_string () {

	stub=`basename $1`
	varname=`echo ${stub::-4} | tr - _`
	echo "const char ${varname}_svg[] = \\" >> $2
	sed 's/\"/\\\"/g;s/^/    "/;s/$/" \\/' $1 >> $2
	echo ";" >> $2
	echo "" >> $2

}

function embed_svgs () {

	files=`ls extern/heroicons/src/24/outline/*.svg images/*.svg`
	outf="src/icons.c"
	cat docs/copyright_message.txt > $outf
	cat <<EOF>>$outf

/* This file is generated by the build.sh script: do not edit directly.
 *
 * The following svgs are the from the heroicons library used under the MIT licence.
 * Copyright (c) Tailwind Labs, Inc.
 */

EOF
	for file in extern/heroicons/src/24/outline/*.svg
	do
		file_as_c_string $file $outf
	done

	cat <<EOF>>$outf

/*
 * The following svgs were created for this project.
 */

EOF

	for file in images/*.svg
	do
		file_as_c_string $file $outf
	done

	echo "const char *svgs[] = {" >> $outf
	for file in $files
	do
		stub=`basename $file`
		varname=`echo ${stub::-4} | tr - _`
		echo "    \"${varname}\", ${varname}_svg," >> $outf
	done
	echo "    \"END\"" >> $outf
	echo "};" >> $outf

}

function convert_to_xpm () {

	# reduce_colors

	files=`ls images/*.png`
	cat docs/copyright_message.txt > src/xpm.c

	for file in $files
	do
		echo "Converting $file to xpm..."
		stub=`basename $file`
		outf="${stub}.xpm"
		convert $file $outf
		cat $outf >> src/xpm.c
		rm $outf
	done

	echo "char **xpm_icons[] = {" >> src/xpm.c
	for file in $files
	do
		stub=`basename $file`
		echo "    ${stub::-4}_png," >> src/xpm.c
	done
	echo "};" >> src/xpm.c
	echo "" >> src/xpm.c

	echo "char *xpm_icon_labels[] = {" >> src/xpm.c
	for file in $files
	do
		stub=`basename $file`
		echo "    \"${stub::-4}\"," >> src/xpm.c
	done
	echo "    \"END\"" >> src/xpm.c
	echo "};" >> src/xpm.c

}

function full_build () {

	git submodule update --init
	convert_to_xpm
	embed_svgs
	run_cmake

}

function test_build () {
    CC=gcc
    OPTIONS="-g -O2 -fPIC -std=c99 -Wall -Wextra -Werror"
    rm -fr test
    mkdir test
    time $CC $OPTIONS src/*.c -o $EMB -lm || exit 1
}

function test_wrap () {
    timeout $TEST_TIME $@ || echo "FAILED" && exit 1
}

function emb_test () {
    echo "Test $1"
    test_wrap $EMB --args --test $1
}

function test_convert () {
    echo "Converting $1 to $2."
    test_wrap $EMB --convert $1 $2
}

function fill_test () {
    echo "Fill SVG test ($1)"
    test_wrap $EMB --fill ../images/$1.png 130 $1.svg
}

function cross_test () {
    echo "Cross fill SVG test ($1)"
    test_wrap $EMB --cross-stitch ../images/$1.png 130 $1.svg
}

function render_fill_test () {
    echo "Render Fill Test ($1)"
    test_wrap $EMB --fill ../images/$1.png 130 $1.csv
    test_wrap $EMB --fill $1.csv $1.png
}

function render_cross_test () {
    echo "Render Cross Test ($1)"
    test_wrap $EMB --cross-stitch ../images/$1.png 130 $1.csv
    test_wrap $EMB --render $1.csv $1_render.png
}


function fast_tests () {
    for i in `seq 0 $TOTAL_TESTS`
    do
        emb_test $i
    done
}

function all_tests () {
    fast_tests

    fill_test donut 130
    fill_test logo-spirals 130
    fill_test berries 130
    fill_test snow-squirrel 130
    fill_test great-tit 130
    fill_test owl 130
    fill_test logo 130

    cross_test logo
    render_fill_test logo
    render_cross_test logo
}

function test_full () {

    date
    test_build
    time all_tests

}

function test_main () {

    date
    test_build
    time fast_tests

}

function cmake_build () {

    mkdir -f build
    cd build
    cmake ..
    cmake --build . || exit 1

}

function collate_artifacts () {

	mkdir artifacts
	cd artifacts

	python3 - <<'___HERE'
import json
import os

os.system("gh api /repos/embroidermodder/website/actions/artifacts > data.json")

f = open("data.json", "r")
d = json.loads(f.read())
f.close()

for i in range(d["total_count"]):
    if d["artifacts"][i]["expired"]:
        print("Artifact %d has expired, skipping." % i)
        continue
    get = "gh api /repos/embroidermodder/website/actions/artifacts/%d/zip > artifact.zip"
    os.system(get % d["artifacts"][i]["id"])
    os.system("""
unzip artifact.zip
mv result.dat result%d.dat
rm artifact.zip
""" % (i))
___HERE

	cd ..

}

# regardless of program success, we need a result for github actions to upload as an artifact
touch result.dat

if [[ "$#" -eq 0 ]]; then
	help_msg
	exit
fi

for arg in $@
do
	case "$1" in
	--website)
		build_website;;
#	--ubuntu-latest | --linux)
#		linux_full;;
#	--macos-latest)
#		macos_full;;
#	--windows-latest)
#		windows_full;;
#	--sharpen)
#		update_needle;;
#	--clean)
#		clean;;
	--version)
		echo $NEEDLE_VERSION;;
	--install-latest)
		install_current_em2;;
	--convert-xpm)
 		convert_to_xpm;;
	-a)
 		analysis;;
	-s | --style)
 		code_style;;
	--init)
		create_init;;
	--svg)
		embed_svgs;;
	-G | --generator)
		# GENERATOR="$OPTARG"
		echo "This is currently broken: please change the script variable directly."
		;;
	-b | --build)
		run_cmake;;
	-f | --full)
		full_build;;
	-d | --debug)
		build_debug;;
	--gnu-linux | --linux | --ubuntu | --build-linux)
		assemble_release "linux";;
	--macos | --build-macos)
		assemble_release "macos";;
	--windows | --build-windows)
		assemble_release "windows";;
	-h | --help)
		cat docs/help.txt | less;;
	-c | --clean)
		rm -fr ${BUILD_DIR};;
#	--test-full)
#		test_full;;
#	--test)
#		test_main;;
#	--github)
#		test_build;;
#	--cmake-build)
#		cmake_build;;
	--collate)
		collate_results;;
	*)
		help_msg;;
	esac
done
